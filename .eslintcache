[{"/home/sergey/Projects/ads-panel-app/src/App.tsx":"1","/home/sergey/Projects/ads-panel-app/src/index.tsx":"2","/home/sergey/Projects/ads-panel-app/src/views/Login.tsx":"3","/home/sergey/Projects/ads-panel-app/src/reportWebVitals.ts":"4","/home/sergey/Projects/ads-panel-app/src/views/Dashboard.tsx":"5","/home/sergey/Projects/ads-panel-app/src/store/sagas.ts":"6","/home/sergey/Projects/ads-panel-app/src/api/index.ts":"7","/home/sergey/Projects/ads-panel-app/src/store/reducers.ts":"8","/home/sergey/Projects/ads-panel-app/src/store/index.ts":"9","/home/sergey/Projects/ads-panel-app/src/api/request.ts":"10","/home/sergey/Projects/ads-panel-app/src/components/Panel.tsx":"11","/home/sergey/Projects/ads-panel-app/src/lib/index.ts":"12","/home/sergey/Projects/ads-panel-app/src/views/Page404.tsx":"13","/home/sergey/Projects/ads-panel-app/src/views/Home.tsx":"14","/home/sergey/Projects/ads-panel-app/src/components/Auth.tsx":"15","/home/sergey/Projects/ads-panel-app/src/components/Dialog.tsx":"16","/home/sergey/Projects/ads-panel-app/src/components/AlertMessage.tsx":"17","/home/sergey/Projects/ads-panel-app/src/views/Registration.tsx":"18","/home/sergey/Projects/ads-panel-app/src/views/Confirm.tsx":"19","/home/sergey/Projects/ads-panel-app/src/views/Forgot.tsx":"20","/home/sergey/Projects/ads-panel-app/src/views/ChangePassword.tsx":"21","/home/sergey/Projects/ads-panel-app/src/components/Graph.tsx":"22","/home/sergey/Projects/ads-panel-app/src/components/BlockProgress.tsx":"23","/home/sergey/Projects/ads-panel-app/src/worker/index.ts":"24","/home/sergey/Projects/ads-panel-app/src/components/BlockSelect.tsx":"25","/home/sergey/Projects/ads-panel-app/src/components/ListElement.tsx":"26"},{"size":3033,"mtime":1606350723186,"results":"27","hashOfConfig":"28"},{"size":1105,"mtime":1606354906439,"results":"29","hashOfConfig":"28"},{"size":4603,"mtime":1606347055404,"results":"30","hashOfConfig":"28"},{"size":425,"mtime":1606158462824,"results":"31","hashOfConfig":"28"},{"size":4505,"mtime":1606385223940,"results":"32","hashOfConfig":"28"},{"size":4502,"mtime":1606362833605,"results":"33","hashOfConfig":"28"},{"size":2349,"mtime":1606364403760,"results":"34","hashOfConfig":"28"},{"size":7771,"mtime":1606362407648,"results":"35","hashOfConfig":"28"},{"size":1581,"mtime":1606362483969,"results":"36","hashOfConfig":"28"},{"size":1399,"mtime":1606361920029,"results":"37","hashOfConfig":"28"},{"size":8978,"mtime":1606292672478,"results":"38","hashOfConfig":"28"},{"size":879,"mtime":1606356874522,"results":"39","hashOfConfig":"28"},{"size":223,"mtime":1606279881709,"results":"40","hashOfConfig":"28"},{"size":257,"mtime":1606279865522,"results":"41","hashOfConfig":"28"},{"size":3689,"mtime":1606387225618,"results":"42","hashOfConfig":"28"},{"size":1161,"mtime":1606292312021,"results":"43","hashOfConfig":"28"},{"size":317,"mtime":1606289733044,"results":"44","hashOfConfig":"28"},{"size":7676,"mtime":1606343167873,"results":"45","hashOfConfig":"28"},{"size":1410,"mtime":1606298599663,"results":"46","hashOfConfig":"28"},{"size":2969,"mtime":1606342686030,"results":"47","hashOfConfig":"28"},{"size":4286,"mtime":1606349864375,"results":"48","hashOfConfig":"49"},{"size":891,"mtime":1606384379982,"results":"50","hashOfConfig":"28"},{"size":156,"mtime":1606343647110,"results":"51","hashOfConfig":"28"},{"size":705,"mtime":1606381194188,"results":"52","hashOfConfig":"28"},{"size":1258,"mtime":1606385124666,"results":"53","hashOfConfig":"28"},{"size":991,"mtime":1606382533024,"results":"54","hashOfConfig":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"107wbcf",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"94","usedDeprecatedRules":"76"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"97","usedDeprecatedRules":"67"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"100","usedDeprecatedRules":"67"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"105","usedDeprecatedRules":"106"},"oxmgbp",{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"109","usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"112","usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"115","usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"118","usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"121","usedDeprecatedRules":"76"},"/home/sergey/Projects/ads-panel-app/src/App.tsx",[],["122","123","124","125","126"],"/home/sergey/Projects/ads-panel-app/src/index.tsx",[],"/home/sergey/Projects/ads-panel-app/src/views/Login.tsx",[],"/home/sergey/Projects/ads-panel-app/src/reportWebVitals.ts",[],"/home/sergey/Projects/ads-panel-app/src/views/Dashboard.tsx",["127","128"],"import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { MenuItem } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport CostIcon from '@material-ui/icons/AttachMoney';\nimport ImpressionsIcon from '@material-ui/icons/Visibility';\nimport ClicksIcon from '@material-ui/icons/TouchApp';\nimport RequestsIcon from '@material-ui/icons/CallMade';\n// @ts-ignore\nimport Worker from 'comlink-loader!../worker/index';\nimport Auth from '../components/Auth';\nimport * as lib from '../lib';\nimport * as Types from '../react-app-env';\nimport Graph from '../components/Graph';\nimport BlockSelect from '../components/BlockSelect';\nimport { action, store, loadStore } from '../store';\nimport ListElement from '../components/ListElement';\n\nconst worker = new Worker();\n\nconst _data = [\n  { date: new Date('2020-11-14T12:56:37.000Z').toString().replace(/\\(.*\\)/, ''), clicks: 10, costs: 12 },\n  { date: new Date('2020-11-14T13:56:37.000Z').toString(), clicks: 20, costs: 43 },\n  { date: new Date('2020-11-14T14:56:37.000Z').toString(), clicks: 100, costs: 23 },\n];\n\nconst timeValues: Types.TimeValues[] = [\n  'today',\n  'yesterday',\n  'last-3-days',\n  'last-7-days',\n  'this-month',\n  'last-30-days',\n  'last-month',\n  'this-quarter',\n  'this-year',\n  'last-year',\n  'custom',\n];\n\nconst times: React.ReactElement[] = timeValues.map((item) => {\n  let name = item.replace(/-/g, ` `);\n  const selected = name === 'last-month';\n  name = lib.capitalizeFirstLetter(name);\n  return (\n    <MenuItem key={item} value={item} selected={selected}>\n      {name}\n    </MenuItem>\n  );\n});\n\nlet _storeSubs = false;\n\nconst DashboardElement = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const [selectValue, setSelectValue] = useState('last-month');\n  const [graphDataArr, setGraphDataArr] = useState([]);\n  const _allStat: Types.AllStat = {\n    cost: 0,\n    impress: 0,\n    requests: 0,\n    clicks: 0,\n  };\n  const [allStat, setAllStat] = useState(_allStat);\n\n  const graphRequest = (value: Types.TimeValues) => {\n    if (value !== 'custom') {\n      action({ type: 'GRAPH_REQUESTED', args: { body: { time: value } } });\n    } else {\n      enqueueSnackbar('Custom parameter not working now...');\n    }\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<{ value: any }>) => {\n    loadStore.dispatch({ type: 'SET_LOAD', value: true });\n    const { value } = event.target;\n    graphRequest(value);\n    setSelectValue(value);\n  };\n\n  useEffect(() => {\n    graphRequest('last-month');\n    if (!_storeSubs) {\n      _storeSubs = true;\n      store.subscribe(() => {\n        const state = store.getState();\n        const { graphData } = state;\n        if (graphData) {\n          if (state.type === 'GRAPH_FAILED') {\n            const { message }: any = graphData.data?.errorData;\n            enqueueSnackbar(`Graph statistic: ${message}`);\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n          } else if (state.type === 'GRAPH_SUCCEEDED') {\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n            const { data }: any = graphData;\n            const { all }: any = data.body;\n            setAllStat({\n              cost: all.cost,\n              impress: all.impressions,\n              clicks: all.clicks,\n              requests: all.requests,\n            });\n            enqueueSnackbar(data?.message);\n            const { graph } = data.body;\n            const pr = worker.computeGraphData(graph);\n            pr.then((d: any) => {\n              setGraphDataArr(d);\n            });\n          }\n        }\n      });\n    }\n  }, []);\n\n  return (\n    <div className={clsx('full-width')}>\n      <div className={clsx('dashboard-header', 'row-center')}>\n        <ListElement title=\"Cost\" value={allStat.cost}>\n          <CostIcon />\n        </ListElement>\n        <ListElement title=\"Impressions\" value={allStat.impress}>\n          <ImpressionsIcon />\n        </ListElement>\n        <ListElement title=\"Requests\" value={allStat.requests}>\n          <RequestsIcon />\n        </ListElement>\n        <ListElement title=\"Clicks\" value={allStat.clicks}>\n          <ClicksIcon />\n        </ListElement>\n        <BlockSelect name=\"Time\" value={selectValue} handleChange={handleSelectChange}>\n          {times}\n        </BlockSelect>\n      </div>\n      <Graph data={graphDataArr} />\n    </div>\n  );\n};\n\nexport default function Dashboard() {\n  return (\n    <Auth redirect={true} roles={['admin', 'user']}>\n      <DashboardElement />\n    </Auth>\n  );\n}\n",["129","130","131","132","133"],"/home/sergey/Projects/ads-panel-app/src/store/sagas.ts",[],"/home/sergey/Projects/ads-panel-app/src/api/index.ts",[],"/home/sergey/Projects/ads-panel-app/src/store/reducers.ts",[],"/home/sergey/Projects/ads-panel-app/src/store/index.ts",[],["134","135","136","137","138"],"/home/sergey/Projects/ads-panel-app/src/api/request.ts",[],"/home/sergey/Projects/ads-panel-app/src/components/Panel.tsx",[],"/home/sergey/Projects/ads-panel-app/src/lib/index.ts",[],["139","140","141","142","143"],"/home/sergey/Projects/ads-panel-app/src/views/Page404.tsx",["144","145"],"/home/sergey/Projects/ads-panel-app/src/views/Home.tsx",["146","147","148"],"/home/sergey/Projects/ads-panel-app/src/components/Auth.tsx",[],"/home/sergey/Projects/ads-panel-app/src/components/Dialog.tsx",[],"/home/sergey/Projects/ads-panel-app/src/components/AlertMessage.tsx",["149"],"import React from 'react';\nimport Alert from '@material-ui/lab/Alert';\nimport * as Types from '../react-app-env';\n\nexport default function AllertMessage(props: Types.AlertProps) {\n  const { message, status }: any = props;\n  return (\n    <Alert variant=\"outlined\" severity={status}>\n      {message}\n    </Alert>\n  );\n}","/home/sergey/Projects/ads-panel-app/src/views/Registration.tsx",["150"],"import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  TextField,\n  Button,\n  FormLabel,\n  FormGroup,\n  Checkbox,\n  CircularProgress,\n} from '@material-ui/core';\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from 'react-router-dom';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport AlertMessage from '../components/AlertMessage';\nimport { action, loadStore, store } from '../store';\nimport * as Types from '../react-app-env';\nimport Auth from '../components/Auth';\n\n// Ограничители подписок, чтобы по нескольку раз не подписывалось на одно и тоже хранилище\nlet _storeSubs = false;\nlet _loadStoreSubs = false;\n\nexport default function Registration() {\n  const { enqueueSnackbar } = useSnackbar();\n  // eslint-disable-next-line no-unused-vars\n  const [cookies, setCookie] = useCookies([]);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [buttonDisable, setButtonDisable] = useState(true);\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [company, setCompany] = useState('');\n  const [skype, setSkype] = useState('');\n  const [passwordRepeat, setPasswordRepeat] = useState('');\n  const [load, setLoad] = useState(false);\n  const history = useHistory();\n  const _alert: Types.AlertProps = {\n    message: 'Alert closed',\n    status: 'info',\n    open: false,\n  };\n  const [alert, setAlert] = useState(_alert);\n\n  useEffect(() => {\n    if (!_loadStoreSubs) {\n      _loadStoreSubs = true;\n      loadStore.subscribe(() => {\n        setLoad(loadStore.getState().value);\n      });\n    }\n    // Обработчик запроса на сервер\n    if (!_storeSubs) {\n      _storeSubs = true;\n      store.subscribe(() => {\n        const state: Types.Reducer = store.getState();\n        if (state.registerData) {\n          if (state.type === 'REGISTRATION_FAILED') {\n            const { message }: any = state.registerData.data?.errorData;\n            enqueueSnackbar(`Registration: ${message}`);\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n          } else if (state.type === 'REGISTRATION_SUCCEEDED') {\n            const { data } = state.registerData;\n            const newAlert: any = {\n              open: true,\n              message: data?.message,\n              status: data?.result,\n            };\n            setAlert(newAlert);\n            if (data?.result === 'success') {\n              const { token } = data.body;\n              // Устанавливате куки с токеном\n              setCookie('_qt', token, {\n                path: '/',\n                sameSite: true,\n                expires: new Date(Date.now() + 3600 * 24 * 1000 * 90),\n              });\n              setTimeout(() => {\n                history.push('/dashboard', 'redirect');\n              }, 2000);\n            }\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n          }\n        }\n      });\n    }\n  }, []);\n\n  return (\n    <Auth redirect={true} roles={['guest']}>\n      <div className={clsx('login-wrapper', 'col-center')}>\n        <div className=\"header\">\n          <Typography variant=\"h4\">Registration form</Typography>\n        </div>\n        <div className=\"form-item\">\n          <Typography>Please fill in all fields</Typography>\n        </div>\n        <FormGroup>\n          <FormLabel>Email</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={email}\n              onChange={(e: any) => {\n                setEmail(e.target.value);\n              }}\n              type=\"email\"\n              variant=\"outlined\"\n              placeholder=\"email\"\n            />\n          </div>\n          <FormLabel>Password</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={password}\n              onChange={(e: any) => {\n                setPassword(e.target.value);\n              }}\n              type=\"password\"\n              variant=\"outlined\"\n              placeholder=\"password\"\n            />\n          </div>\n          <FormLabel>Password repeat</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={passwordRepeat}\n              onChange={(e: any) => {\n                setPasswordRepeat(e.target.value);\n              }}\n              type=\"password\"\n              variant=\"outlined\"\n              placeholder=\"password repeat\"\n            />\n          </div>\n          <FormLabel>First name</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={firstName}\n              onChange={(e: any) => {\n                setFirstName(e.target.value);\n              }}\n              type=\"name\"\n              variant=\"outlined\"\n              placeholder=\"last name\"\n            />\n          </div>\n          <FormLabel>Last name</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={lastName}\n              onChange={(e: any) => {\n                setLastName(e.target.value);\n              }}\n              type=\"name\"\n              variant=\"outlined\"\n              placeholder=\"last name\"\n            />\n          </div>\n          <FormLabel>Company</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={company}\n              onChange={(e: any) => {\n                setCompany(e.target.value);\n              }}\n              type=\"text\"\n              variant=\"outlined\"\n              placeholder=\"company\"\n            />\n          </div>\n          <FormLabel>Skype</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={skype}\n              onChange={(e: any) => {\n                setSkype(e.target.value);\n              }}\n              type=\"text\"\n              variant=\"outlined\"\n              placeholder=\"skype\"\n            />\n          </div>\n          <div className={clsx('row-center', 'form-item')}>\n            <Checkbox\n              onChange={(e) => {\n                setButtonDisable(!e.target.checked);\n              }}\n            />\n            <Typography>Accept Terms of use</Typography>\n          </div>\n        </FormGroup>\n        <div className=\"form-item\">\n          {load ? (\n            <CircularProgress />\n          ) : (\n            <Button\n              disabled={buttonDisable}\n              variant=\"contained\"\n              color=\"secondary\"\n              type=\"submit\"\n              // eslint-disable-next-line no-unused-vars\n              onClick={(e: any) => {\n                setAlert(_alert);\n                loadStore.dispatch({ type: 'SET_LOAD', value: true });\n                action({\n                  type: 'REGISTRATION_REQUESTED',\n                  args: {\n                    body: {\n                      email,\n                      password,\n                      password_repeat: passwordRepeat,\n                      first_name: firstName,\n                      last_name: lastName,\n                      company,\n                      skype,\n                    },\n                  },\n                });\n              }}>\n              Send\n            </Button>\n          )}\n        </div>\n        <div className=\"form-item\">\n          {alert.open ? <AlertMessage message={alert.message} status={alert.status} /> : ''}\n        </div>\n      </div>\n    </Auth>\n  );\n}","/home/sergey/Projects/ads-panel-app/src/views/Confirm.tsx",["151"],"import React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport { Typography } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport AlertMessage from '../components/AlertMessage';\nimport * as Types from '../react-app-env';\nimport { action, store } from '../store';\n\nexport default function Confirm() {\n  const history = useHistory();\n  const parsedQuery = queryString.parse(history.location.search);\n  const { e, k } = parsedQuery;\n  const _alert: Types.AlertProps = {\n    message: 'Alert closed',\n    status: 'info',\n    open: false,\n  };\n  const [alert, setAlert] = useState(_alert);\n\n  useEffect(() => {\n    store.subscribe(() => {\n      const state = store.getState();\n      const { confirmData } = state;\n      if (confirmData) {\n        const { data }: any = confirmData;\n        if (confirmData.type === 'CONFIRM_SUCCEEDED') {\n          setAlert({\n            open: true,\n            status: data.result,\n            message: data.message,\n          });\n        }\n      }\n    });\n    action({\n      type: 'CONFIRM_REQUESTED',\n      args: {\n        params: { e, k },\n      },\n    });\n  }, []);\n\n  return (\n    <div className=\"col-center\">\n      <Typography variant=\"h4\">{e}</Typography>\n      <div className=\"form-item\">\n        {alert.open ? <AlertMessage message={alert.message} status={alert.status} /> : ''}\n      </div>\n    </div>\n  );\n}","/home/sergey/Projects/ads-panel-app/src/views/Forgot.tsx",["152"],"/home/sergey/Projects/ads-panel-app/src/views/ChangePassword.tsx",["153","154"],"import React, { useState, useEffect } from 'react';\nimport { Typography, FormLabel, FormGroup, TextField, Button } from '@material-ui/core';\nimport { Link, useHistory } from 'react-router-dom';\nimport queryString from 'query-string';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport BlockProgress from '../components/BlockProgress';\nimport Auth from '../components/Auth';\nimport AlertMessage from '../components/AlertMessage';\nimport { loadStore, store, action } from '../store';\nimport * as Types from '../react-app-env';\n\nlet _storeSubs = false;\nlet _loadStoreSubs = false;\n\nexport default function ChangePassword() {\n  const { enqueueSnackbar } = useSnackbar();\n  const history = useHistory();\n  const [password, setPassword] = useState('');\n  const [passwordRepeat, setPasswordRepeat] = useState('');\n  const [load, setLoad] = useState(false);\n  const parsedQuery = queryString.parse(history.location.search);\n  const _alert: Types.AlertProps = {\n    message: 'Alert closed',\n    status: 'info',\n    open: false,\n  };\n  const [alert, setAlert] = useState(_alert);\n\n  useEffect(() => {\n    if (!_loadStoreSubs) {\n      _loadStoreSubs = true;\n      loadStore.subscribe(() => {\n        setLoad(loadStore.getState().value);\n      });\n    }\n    if (!_storeSubs) {\n      _storeSubs = true;\n      store.subscribe(() => {\n        const state = store.getState();\n        if (state.passData) {\n          if (state.type === 'CHANGE_PASS_FAILED') {\n            const { message }: any = state.passData?.data?.errorData;\n            enqueueSnackbar(`Change password: ${message}`);\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n          } else if (state.type === 'CHANGE_PASS_SUCCEEDED') {\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n            const { data } = state.passData;\n            const newAlert: any = {\n              open: true,\n              message: data?.message,\n              status: data?.result,\n            };\n            setAlert(newAlert);\n            if (data?.result === 'success') {\n              setTimeout(() => {\n                history.push('/');\n              }, 1500);\n            }\n          }\n        }\n      });\n    }\n  }, []);\n\n  const token: any = parsedQuery.k;\n  const email: any = parsedQuery.e;\n  return (\n    <div className={clsx('login-wrapper', 'col-center')}>\n      <div className=\"header\">\n        <Typography variant=\"h4\">Change password form</Typography>\n      </div>\n      <div className=\"form-item\">\n        <Typography>Please fill in all fields</Typography>\n      </div>\n      <FormGroup>\n        <FormLabel>Password</FormLabel>\n        <div className={clsx('form-item', 'col-center')}>\n          <TextField\n            defaultValue={password}\n            onChange={(e: any) => {\n              setPassword(e.target.value);\n            }}\n            type=\"password\"\n            variant=\"outlined\"\n            placeholder=\"password\"\n          />\n        </div>\n        <FormLabel>Password repeat</FormLabel>\n        <div className={clsx('form-item', 'col-center')}>\n          <TextField\n            defaultValue={passwordRepeat}\n            onChange={(e: any) => {\n              setPasswordRepeat(e.target.value);\n            }}\n            type=\"password\"\n            variant=\"outlined\"\n            placeholder=\"password repeat\"\n          />\n        </div>\n      </FormGroup>\n      <div className=\"form-item\">\n        {load ? (\n          <BlockProgress />\n        ) : (\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            type=\"submit\"\n            // eslint-disable-next-line no-unused-vars\n            onClick={(e: any) => {\n              loadStore.dispatch({ type: 'SET_LOAD', value: true });\n              action({\n                type: 'CHANGE_PASS_REQUESTED',\n                args: { token, body: { password, password_repeat: passwordRepeat, email } },\n              });\n              setAlert(_alert);\n            }}>\n            Send\n          </Button>\n        )}\n      </div>\n      <div className=\"form-item\">\n        {alert.open ? <AlertMessage message={alert.message} status={alert.status} /> : ''}\n      </div>\n      <div className=\"form-item\">\n        <Link to=\"/forgot\">Send new email</Link>\n      </div>\n    </div>\n  );\n}",["155","156","157","158","159"],"/home/sergey/Projects/ads-panel-app/src/components/Graph.tsx",["160"],"import React, { useEffect } from 'react';\nimport { Paper } from '@material-ui/core';\nimport { ArgumentAxis, ValueAxis, Chart, LineSeries } from '@devexpress/dx-react-chart-material-ui';\nimport * as Types from '../react-app-env';\n\nexport default function Graph(props: Types.GraphProps) {\n  const { data } = props;\n\n  const selfData =\n    data.length === 0\n      ? [\n          {\n            date: 0,\n            clicks: 0,\n            cost: 0,\n          },\n        ]\n      : data;\n\n  useEffect(() => {\n    // console.log(data)\n  }, [data]);\n\n  return (\n    <Paper>\n      <Chart data={selfData}>\n        <ArgumentAxis tickSize={23} position=\"top\" showGrid={false} />\n        <ValueAxis showGrid={true} />\n\n        <LineSeries name=\"clicks\" valueField=\"clicks\" argumentField=\"date\" />\n        <LineSeries name=\"cost\" valueField=\"cost\" argumentField=\"date\" />\n      </Chart>\n    </Paper>\n  );\n};\n","/home/sergey/Projects/ads-panel-app/src/components/BlockProgress.tsx",["161"],"import React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nexport default function BlockProgress() {\n  return <CircularProgress />;\n}","/home/sergey/Projects/ads-panel-app/src/worker/index.ts",["162","163","164"],"/**\n * Вебворкер для Реакт от comlink-loader\n * для тяжелых вычислений, чтобы не грузить браузер еффективнее используя ресурсы системы\n * Всё что с циклами не в lib а сюда.\n */\nimport dayjs from 'dayjs';\nimport * as Types from '../react-app-env';\n\n/**\n * Расчет данных для графика.\n * @param data - данные с сервера\n */\n\nexport function computeGraphData(data: any[]): Types.GraphData[] {\n  return data.map((item: any) => {\n    return {\n      clicks: item.clicks,\n      date: dayjs(item.dateMax).format('DD-MM-YYYY'),\n      cost: item.cost\n    };\n  });\n}","/home/sergey/Projects/ads-panel-app/src/components/BlockSelect.tsx",["165","166","167"],"import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport * as Types from '../react-app-env';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 200,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  })\n);\n\nexport default function SimpleSelect(props: Types.SelectProps) {\n  const { children, handleChange, value, name } = props;\n  const classes = useStyles();\n\n  return (\n    <div>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-outlined-label\">{name}</InputLabel>\n        <Select\n          color=\"secondary\"\n          labelId=\"demo-simple-select-outlined-label\"\n          id=\"demo-simple-select-outlined\"\n          value={value}\n          onChange={handleChange}\n          label={name}>\n          {children}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}","/home/sergey/Projects/ads-panel-app/src/components/ListElement.tsx",["168"],"import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport * as Types from '../react-app-env';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  })\n);\n\nexport default function FolderList(props: Types.ListElementProps) {\n  const { children, title, value } = props;\n  const classes = useStyles();\n\n  return (\n    <List className={classes.root}>\n      <ListItem>\n        <ListItemAvatar>\n          <Avatar>{children}</Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={title} secondary={value} />\n      </ListItem>\n    </List>\n  );\n}",{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":21,"column":7,"nodeType":"181","messageId":"182","endLine":21,"endColumn":12},{"ruleId":"183","severity":1,"message":"184","line":22,"column":4,"nodeType":null,"endLine":22,"endColumn":103,"fix":"185"},{"ruleId":"169","replacedBy":"186"},{"ruleId":"171","replacedBy":"187"},{"ruleId":"173","replacedBy":"188"},{"ruleId":"175","replacedBy":"189"},{"ruleId":"177","replacedBy":"190"},{"ruleId":"169","replacedBy":"191"},{"ruleId":"171","replacedBy":"192"},{"ruleId":"173","replacedBy":"193"},{"ruleId":"175","replacedBy":"194"},{"ruleId":"177","replacedBy":"195"},{"ruleId":"169","replacedBy":"196"},{"ruleId":"171","replacedBy":"197"},{"ruleId":"173","replacedBy":"198"},{"ruleId":"175","replacedBy":"199"},{"ruleId":"177","replacedBy":"200"},{"ruleId":"179","severity":1,"message":"201","line":3,"column":13,"nodeType":"181","messageId":"182","endLine":3,"endColumn":16},{"ruleId":"183","severity":1,"message":"202","line":6,"column":20,"nodeType":null,"endLine":8,"endColumn":3,"fix":"203"},{"ruleId":"179","severity":1,"message":"201","line":3,"column":13,"nodeType":"181","messageId":"182","endLine":3,"endColumn":16},{"ruleId":"183","severity":1,"message":"202","line":6,"column":20,"nodeType":null,"endLine":8,"endColumn":3,"fix":"204"},{"ruleId":"183","severity":1,"message":"205","line":11,"column":2,"nodeType":null,"endLine":11,"endColumn":2,"fix":"206"},{"ruleId":"183","severity":1,"message":"205","line":12,"column":2,"nodeType":null,"endLine":12,"endColumn":2,"fix":"207"},{"ruleId":"183","severity":1,"message":"205","line":230,"column":2,"nodeType":null,"endLine":230,"endColumn":2,"fix":"208"},{"ruleId":"183","severity":1,"message":"205","line":51,"column":2,"nodeType":null,"endLine":51,"endColumn":2,"fix":"209"},{"ruleId":"179","severity":1,"message":"210","line":20,"column":28,"nodeType":"181","messageId":"182","endLine":20,"endColumn":41},{"ruleId":"179","severity":1,"message":"211","line":8,"column":8,"nodeType":"181","messageId":"182","endLine":8,"endColumn":12},{"ruleId":"183","severity":1,"message":"205","line":131,"column":2,"nodeType":null,"endLine":131,"endColumn":2,"fix":"212"},{"ruleId":"169","replacedBy":"213"},{"ruleId":"171","replacedBy":"214"},{"ruleId":"173","replacedBy":"215"},{"ruleId":"175","replacedBy":"216"},{"ruleId":"177","replacedBy":"217"},{"ruleId":"183","severity":1,"message":"218","line":35,"column":2,"nodeType":null,"endLine":35,"endColumn":3,"fix":"219"},{"ruleId":"183","severity":1,"message":"205","line":6,"column":2,"nodeType":null,"endLine":6,"endColumn":2,"fix":"220"},{"ruleId":"221","severity":1,"message":"222","line":14,"column":1,"nodeType":"223","endLine":22,"endColumn":2},{"ruleId":"183","severity":1,"message":"224","line":19,"column":22,"nodeType":null,"endLine":19,"endColumn":22,"fix":"225"},{"ruleId":"183","severity":1,"message":"205","line":22,"column":2,"nodeType":null,"endLine":22,"endColumn":2,"fix":"226"},{"ruleId":"179","severity":1,"message":"227","line":4,"column":8,"nodeType":"181","messageId":"182","endLine":4,"endColumn":16},{"ruleId":"179","severity":1,"message":"228","line":5,"column":8,"nodeType":"181","messageId":"182","endLine":5,"endColumn":22},{"ruleId":"183","severity":1,"message":"205","line":42,"column":2,"nodeType":null,"endLine":42,"endColumn":2,"fix":"229"},{"ruleId":"183","severity":1,"message":"205","line":34,"column":2,"nodeType":null,"endLine":34,"endColumn":2,"fix":"230"},"lines-around-directive",["231"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'_data' is assigned a value but never used.","Identifier","unusedVar","prettier/prettier","Replace `·date:·new·Date('2020-11-14T12:56:37.000Z').toString().replace(/\\(.*\\)/,·''),·clicks:·10,·costs:·12` with `⏎····date:·new·Date('2020-11-14T12:56:37.000Z').toString().replace(/\\(.*\\)/,·''),⏎····clicks:·10,⏎····costs:·12,⏎·`",{"range":"232","text":"233"},["231"],[],[],[],[],["231"],[],[],[],[],["231"],[],[],[],[],"'lib' is defined but never used.","Delete `⏎····⏎··`",{"range":"234","text":"235"},{"range":"236","text":"235"},"Insert `⏎`",{"range":"237","text":"238"},{"range":"239","text":"238"},{"range":"240","text":"238"},{"range":"241","text":"238"},"'closeSnackbar' is assigned a value but never used.","'Auth' is defined but never used.",{"range":"242","text":"238"},["231"],[],[],[],[],"Delete `;`",{"range":"243","text":"235"},{"range":"244","text":"238"},"import/prefer-default-export","Prefer default export.","ExportNamedDeclaration","Insert `,`",{"range":"245","text":"246"},{"range":"247","text":"238"},"'MenuItem' is defined but never used.","'FormHelperText' is defined but never used.",{"range":"248","text":"238"},{"range":"249","text":"238"},"padding-line-between-statements",[820,919],"\n    date: new Date('2020-11-14T12:56:37.000Z').toString().replace(/\\(.*\\)/, ''),\n    clicks: 10,\n    costs: 12,\n ",[174,182],"",[181,189],[257,257],"\n",[317,317],[7552,7552],[1410,1410],[4286,4286],[889,890],[156,156],[538,538],",",[553,553],[1258,1258],[991,991]]