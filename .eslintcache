[{"/home/sergey/Projects/ads-panel-app/src/App.tsx":"1","/home/sergey/Projects/ads-panel-app/src/index.tsx":"2","/home/sergey/Projects/ads-panel-app/src/views/Login.tsx":"3","/home/sergey/Projects/ads-panel-app/src/reportWebVitals.ts":"4","/home/sergey/Projects/ads-panel-app/src/views/Dashboard.tsx":"5","/home/sergey/Projects/ads-panel-app/src/store/sagas.ts":"6","/home/sergey/Projects/ads-panel-app/src/api/index.ts":"7","/home/sergey/Projects/ads-panel-app/src/store/reducers.ts":"8","/home/sergey/Projects/ads-panel-app/src/store/index.ts":"9","/home/sergey/Projects/ads-panel-app/src/api/request.ts":"10","/home/sergey/Projects/ads-panel-app/src/components/Panel.tsx":"11","/home/sergey/Projects/ads-panel-app/src/lib/index.ts":"12","/home/sergey/Projects/ads-panel-app/src/views/Page404.tsx":"13","/home/sergey/Projects/ads-panel-app/src/views/Home.tsx":"14","/home/sergey/Projects/ads-panel-app/src/components/Auth.tsx":"15","/home/sergey/Projects/ads-panel-app/src/components/Dialog.tsx":"16","/home/sergey/Projects/ads-panel-app/src/components/AlertMessage.tsx":"17","/home/sergey/Projects/ads-panel-app/src/views/Registration.tsx":"18","/home/sergey/Projects/ads-panel-app/src/views/Confirm.tsx":"19","/home/sergey/Projects/ads-panel-app/src/views/Forgot.tsx":"20","/home/sergey/Projects/ads-panel-app/src/views/ChangePassword.tsx":"21","/home/sergey/Projects/ads-panel-app/src/components/Graph.tsx":"22","/home/sergey/Projects/ads-panel-app/src/components/BlockProgress.tsx":"23","/home/sergey/Projects/ads-panel-app/src/worker/index.ts":"24","/home/sergey/Projects/ads-panel-app/src/components/BlockSelect.tsx":"25","/home/sergey/Projects/ads-panel-app/src/components/ListElement.tsx":"26","/home/sergey/Projects/ads-panel-app/src/components/DatePicker.tsx":"27","/home/sergey/Projects/ads-panel-app/src/components/TableStatisistic.tsx":"28","/home/sergey/Projects/ads-panel-app/src/components/Pagination.tsx":"29"},{"size":3033,"mtime":1606350723186,"results":"30","hashOfConfig":"31"},{"size":1497,"mtime":1606443206131,"results":"32","hashOfConfig":"31"},{"size":4603,"mtime":1606347055404,"results":"33","hashOfConfig":"31"},{"size":425,"mtime":1606158462824,"results":"34","hashOfConfig":"31"},{"size":13955,"mtime":1606479571916,"results":"35","hashOfConfig":"36"},{"size":5124,"mtime":1606450011532,"results":"37","hashOfConfig":"31"},{"size":2633,"mtime":1606449853793,"results":"38","hashOfConfig":"31"},{"size":8740,"mtime":1606450096009,"results":"39","hashOfConfig":"31"},{"size":1624,"mtime":1606450128464,"results":"40","hashOfConfig":"31"},{"size":1513,"mtime":1606438505043,"results":"41","hashOfConfig":"31"},{"size":8978,"mtime":1606292672478,"results":"42","hashOfConfig":"31"},{"size":879,"mtime":1606356874522,"results":"43","hashOfConfig":"31"},{"size":223,"mtime":1606279881709,"results":"44","hashOfConfig":"31"},{"size":257,"mtime":1606279865522,"results":"45","hashOfConfig":"31"},{"size":3804,"mtime":1606440820576,"results":"46","hashOfConfig":"31"},{"size":1161,"mtime":1606292312021,"results":"47","hashOfConfig":"31"},{"size":317,"mtime":1606289733044,"results":"48","hashOfConfig":"31"},{"size":7676,"mtime":1606343167873,"results":"49","hashOfConfig":"31"},{"size":1410,"mtime":1606298599663,"results":"50","hashOfConfig":"31"},{"size":2969,"mtime":1606342686030,"results":"51","hashOfConfig":"31"},{"size":4286,"mtime":1606349864375,"results":"52","hashOfConfig":"31"},{"size":1056,"mtime":1606448088412,"results":"53","hashOfConfig":"31"},{"size":156,"mtime":1606343647110,"results":"54","hashOfConfig":"31"},{"size":2145,"mtime":1606472997599,"results":"55","hashOfConfig":"36"},{"size":1258,"mtime":1606385124666,"results":"56","hashOfConfig":"31"},{"size":991,"mtime":1606382533024,"results":"57","hashOfConfig":"31"},{"size":360,"mtime":1606444013099,"results":"58","hashOfConfig":"31"},{"size":2965,"mtime":1606472934497,"results":"59","hashOfConfig":"36"},{"size":526,"mtime":1606474030812,"results":"60","hashOfConfig":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"107wbcf",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ydohv9",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"95","usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"103","usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"117","usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"122","usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"127","usedDeprecatedRules":"63"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"130","usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/sergey/Projects/ads-panel-app/src/App.tsx",[],["138","139","140","141","142"],"/home/sergey/Projects/ads-panel-app/src/index.tsx",[],"/home/sergey/Projects/ads-panel-app/src/views/Login.tsx",[],"/home/sergey/Projects/ads-panel-app/src/reportWebVitals.ts",[],["143","144","145","146","147"],"/home/sergey/Projects/ads-panel-app/src/views/Dashboard.tsx",[],"/home/sergey/Projects/ads-panel-app/src/store/sagas.ts",[],"/home/sergey/Projects/ads-panel-app/src/api/index.ts",[],"/home/sergey/Projects/ads-panel-app/src/store/reducers.ts",[],"/home/sergey/Projects/ads-panel-app/src/store/index.ts",["148"],"/home/sergey/Projects/ads-panel-app/src/api/request.ts",["149"],"/**\n *  Метод запросов на сервер\n */\nimport { Cookies } from 'react-cookie';\nimport * as lib from '../lib';\nimport * as Types from '../react-app-env';\n\nconst cookies = new Cookies();\n\nconst { REACT_APP_SERVER_URL, REACT_APP_SERVER_URL_LOCAL, NODE_ENV } = process.env;\nconst dev = NODE_ENV === 'development';\n\nconst serverUrl = dev ? REACT_APP_SERVER_URL_LOCAL : REACT_APP_SERVER_URL_LOCAL;\n\nexport default function request(\n  path: string,\n  method: Types.RequestMethods,\n  paramBody: any = null,\n  token: string = ''\n): Promise<Types.ServerResponse> {\n  const jwtToken = cookies.get('_qt');\n  return new Promise((resolve, reject) => {\n    const params: any = {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        'xx-auth': jwtToken, // В большинстве запросов токен будет JWT\n        'xx-token': token, // В таких запросах как смена пароля токет base64 временной метки\n      },\n    };\n    if (paramBody && method !== 'GET') {\n      params.body = JSON.stringify(paramBody);\n    }\n    let query = '';\n    if (paramBody && method === 'GET') {\n      query = lib.stringifyQuery(paramBody);\n    }\n    fetch(`${serverUrl}${path}${query}`, params)\n      .then((r: any) => r.json())\n      .then((data: any) => {\n        resolve(data);\n      })\n      .catch((e: Error) => {\n        // eslint-disable-next-line no-console\n        if (dev) console.error(e);\n        reject(e);\n      });\n  });\n}\n","/home/sergey/Projects/ads-panel-app/src/components/Panel.tsx",[],["150","151","152","153","154"],"/home/sergey/Projects/ads-panel-app/src/lib/index.ts",[],"/home/sergey/Projects/ads-panel-app/src/views/Page404.tsx",["155","156"],"import React, { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport * as lib from '../lib';\n\nexport default function Page404() {\n  useEffect(() => {\n    \n  }, []);\n\n  return <Redirect to=\"/\" />;\n}\n",["157","158","159","160","161"],"/home/sergey/Projects/ads-panel-app/src/views/Home.tsx",["162","163","164"],"import React, { useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport * as lib from '../lib';\n\nexport default function Home() {\n  useEffect(() => {\n    \n  }, []);\n\n  return <Typography variant=\"h2\">Home page</Typography>;\n}","/home/sergey/Projects/ads-panel-app/src/components/Auth.tsx",[],"/home/sergey/Projects/ads-panel-app/src/components/Dialog.tsx",[],["165","166","167","168","169"],"/home/sergey/Projects/ads-panel-app/src/components/AlertMessage.tsx",["170"],"import React from 'react';\nimport Alert from '@material-ui/lab/Alert';\nimport * as Types from '../react-app-env';\n\nexport default function AllertMessage(props: Types.AlertProps) {\n  const { message, status }: any = props;\n  return (\n    <Alert variant=\"outlined\" severity={status}>\n      {message}\n    </Alert>\n  );\n}","/home/sergey/Projects/ads-panel-app/src/views/Registration.tsx",["171"],"import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  TextField,\n  Button,\n  FormLabel,\n  FormGroup,\n  Checkbox,\n  CircularProgress,\n} from '@material-ui/core';\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from 'react-router-dom';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport AlertMessage from '../components/AlertMessage';\nimport { action, loadStore, store } from '../store';\nimport * as Types from '../react-app-env';\nimport Auth from '../components/Auth';\n\n// Ограничители подписок, чтобы по нескольку раз не подписывалось на одно и тоже хранилище\nlet _storeSubs = false;\nlet _loadStoreSubs = false;\n\nexport default function Registration() {\n  const { enqueueSnackbar } = useSnackbar();\n  // eslint-disable-next-line no-unused-vars\n  const [cookies, setCookie] = useCookies([]);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [buttonDisable, setButtonDisable] = useState(true);\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [company, setCompany] = useState('');\n  const [skype, setSkype] = useState('');\n  const [passwordRepeat, setPasswordRepeat] = useState('');\n  const [load, setLoad] = useState(false);\n  const history = useHistory();\n  const _alert: Types.AlertProps = {\n    message: 'Alert closed',\n    status: 'info',\n    open: false,\n  };\n  const [alert, setAlert] = useState(_alert);\n\n  useEffect(() => {\n    if (!_loadStoreSubs) {\n      _loadStoreSubs = true;\n      loadStore.subscribe(() => {\n        setLoad(loadStore.getState().value);\n      });\n    }\n    // Обработчик запроса на сервер\n    if (!_storeSubs) {\n      _storeSubs = true;\n      store.subscribe(() => {\n        const state: Types.Reducer = store.getState();\n        if (state.registerData) {\n          if (state.type === 'REGISTRATION_FAILED') {\n            const { message }: any = state.registerData.data?.errorData;\n            enqueueSnackbar(`Registration: ${message}`);\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n          } else if (state.type === 'REGISTRATION_SUCCEEDED') {\n            const { data } = state.registerData;\n            const newAlert: any = {\n              open: true,\n              message: data?.message,\n              status: data?.result,\n            };\n            setAlert(newAlert);\n            if (data?.result === 'success') {\n              const { token } = data.body;\n              // Устанавливате куки с токеном\n              setCookie('_qt', token, {\n                path: '/',\n                sameSite: true,\n                expires: new Date(Date.now() + 3600 * 24 * 1000 * 90),\n              });\n              setTimeout(() => {\n                history.push('/dashboard', 'redirect');\n              }, 2000);\n            }\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n          }\n        }\n      });\n    }\n  }, []);\n\n  return (\n    <Auth redirect={true} roles={['guest']}>\n      <div className={clsx('login-wrapper', 'col-center')}>\n        <div className=\"header\">\n          <Typography variant=\"h4\">Registration form</Typography>\n        </div>\n        <div className=\"form-item\">\n          <Typography>Please fill in all fields</Typography>\n        </div>\n        <FormGroup>\n          <FormLabel>Email</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={email}\n              onChange={(e: any) => {\n                setEmail(e.target.value);\n              }}\n              type=\"email\"\n              variant=\"outlined\"\n              placeholder=\"email\"\n            />\n          </div>\n          <FormLabel>Password</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={password}\n              onChange={(e: any) => {\n                setPassword(e.target.value);\n              }}\n              type=\"password\"\n              variant=\"outlined\"\n              placeholder=\"password\"\n            />\n          </div>\n          <FormLabel>Password repeat</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={passwordRepeat}\n              onChange={(e: any) => {\n                setPasswordRepeat(e.target.value);\n              }}\n              type=\"password\"\n              variant=\"outlined\"\n              placeholder=\"password repeat\"\n            />\n          </div>\n          <FormLabel>First name</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={firstName}\n              onChange={(e: any) => {\n                setFirstName(e.target.value);\n              }}\n              type=\"name\"\n              variant=\"outlined\"\n              placeholder=\"last name\"\n            />\n          </div>\n          <FormLabel>Last name</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={lastName}\n              onChange={(e: any) => {\n                setLastName(e.target.value);\n              }}\n              type=\"name\"\n              variant=\"outlined\"\n              placeholder=\"last name\"\n            />\n          </div>\n          <FormLabel>Company</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={company}\n              onChange={(e: any) => {\n                setCompany(e.target.value);\n              }}\n              type=\"text\"\n              variant=\"outlined\"\n              placeholder=\"company\"\n            />\n          </div>\n          <FormLabel>Skype</FormLabel>\n          <div className={clsx('form-item', 'col-center')}>\n            <TextField\n              defaultValue={skype}\n              onChange={(e: any) => {\n                setSkype(e.target.value);\n              }}\n              type=\"text\"\n              variant=\"outlined\"\n              placeholder=\"skype\"\n            />\n          </div>\n          <div className={clsx('row-center', 'form-item')}>\n            <Checkbox\n              onChange={(e) => {\n                setButtonDisable(!e.target.checked);\n              }}\n            />\n            <Typography>Accept Terms of use</Typography>\n          </div>\n        </FormGroup>\n        <div className=\"form-item\">\n          {load ? (\n            <CircularProgress />\n          ) : (\n            <Button\n              disabled={buttonDisable}\n              variant=\"contained\"\n              color=\"secondary\"\n              type=\"submit\"\n              // eslint-disable-next-line no-unused-vars\n              onClick={(e: any) => {\n                setAlert(_alert);\n                loadStore.dispatch({ type: 'SET_LOAD', value: true });\n                action({\n                  type: 'REGISTRATION_REQUESTED',\n                  args: {\n                    body: {\n                      email,\n                      password,\n                      password_repeat: passwordRepeat,\n                      first_name: firstName,\n                      last_name: lastName,\n                      company,\n                      skype,\n                    },\n                  },\n                });\n              }}>\n              Send\n            </Button>\n          )}\n        </div>\n        <div className=\"form-item\">\n          {alert.open ? <AlertMessage message={alert.message} status={alert.status} /> : ''}\n        </div>\n      </div>\n    </Auth>\n  );\n}","/home/sergey/Projects/ads-panel-app/src/views/Confirm.tsx",["172"],"import React, { useEffect, useState } from 'react';\nimport queryString from 'query-string';\nimport { Typography } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport AlertMessage from '../components/AlertMessage';\nimport * as Types from '../react-app-env';\nimport { action, store } from '../store';\n\nexport default function Confirm() {\n  const history = useHistory();\n  const parsedQuery = queryString.parse(history.location.search);\n  const { e, k } = parsedQuery;\n  const _alert: Types.AlertProps = {\n    message: 'Alert closed',\n    status: 'info',\n    open: false,\n  };\n  const [alert, setAlert] = useState(_alert);\n\n  useEffect(() => {\n    store.subscribe(() => {\n      const state = store.getState();\n      const { confirmData } = state;\n      if (confirmData) {\n        const { data }: any = confirmData;\n        if (confirmData.type === 'CONFIRM_SUCCEEDED') {\n          setAlert({\n            open: true,\n            status: data.result,\n            message: data.message,\n          });\n        }\n      }\n    });\n    action({\n      type: 'CONFIRM_REQUESTED',\n      args: {\n        params: { e, k },\n      },\n    });\n  }, []);\n\n  return (\n    <div className=\"col-center\">\n      <Typography variant=\"h4\">{e}</Typography>\n      <div className=\"form-item\">\n        {alert.open ? <AlertMessage message={alert.message} status={alert.status} /> : ''}\n      </div>\n    </div>\n  );\n}",["173","174","175","176","177"],"/home/sergey/Projects/ads-panel-app/src/views/Forgot.tsx",["178"],"import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport {\n  Typography,\n  TextField,\n  Button,\n  FormGroup,\n  FormLabel,\n  CircularProgress,\n} from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport AlertMessage from '../components/AlertMessage';\nimport { action, store, loadStore } from '../store';\nimport * as Types from '../react-app-env';\n\nlet _storeSubs = false;\nlet _loadStoreSubs = false;\n\nexport default function Confirm() {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [load, setLoad] = useState(false);\n  const [email, setEmail] = useState('');\n  const _alert: Types.AlertProps = {\n    open: false,\n    message: 'Alert closed',\n    status: 'info',\n  };\n  const [alert, setAlert] = useState(_alert);\n  useEffect(() => {\n    if (!_loadStoreSubs) {\n      _loadStoreSubs = true;\n      loadStore.subscribe(() => {\n        setLoad(loadStore.getState().value);\n      });\n    }\n    if (!_storeSubs) {\n      _storeSubs = true;\n      store.subscribe(() => {\n        const state = store.getState();\n        const { emailData } = state;\n        if (emailData) {\n          if (state.type === 'EMAIL_SUCCEEDED') {\n            const { data }: any = emailData;\n            setAlert({\n              message: data.message,\n              status: data.result,\n              open: true,\n            });\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n          } else if (state.type === 'EMAIL_FAILED') {\n            const { message }: any = emailData.data?.errorData;\n            enqueueSnackbar(`Forgot password: ${message}`);\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n          }\n        }\n      });\n    }\n  }, []);\n\n  return (\n    <div className={clsx('col-center')}>\n      <div className=\"header\">\n        <Typography variant=\"h4\">Request to change password</Typography>\n      </div>\n      <FormGroup>\n        <FormLabel>Email</FormLabel>\n        <div className=\"form-item\">\n          <TextField\n            defaultValue={email}\n            onChange={(e: any) => {\n              setEmail(e.target.value);\n            }}\n            type=\"email\"\n            variant=\"outlined\"\n            placeholder=\"email\"\n          />\n        </div>\n      </FormGroup>\n      <div className=\"form-item\">\n        {load ? (\n          <CircularProgress />\n        ) : (\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            type=\"submit\"\n            // eslint-disable-next-line no-unused-vars\n            onClick={(e: any) => {\n              setAlert(_alert);\n              loadStore.dispatch({ type: 'SET_LOAD', value: true });\n              action({ type: 'EMAIL_REQUESTED', args: { body: { email } } });\n            }}>\n            Send\n          </Button>\n        )}\n      </div>\n      <div className=\"form-item\">\n        {alert.open ? <AlertMessage status={alert.status} message={alert.message} /> : ''}\n      </div>\n    </div>\n  );\n}\n",["179","180","181","182","183"],"/home/sergey/Projects/ads-panel-app/src/views/ChangePassword.tsx",["184","185"],"import React, { useState, useEffect } from 'react';\nimport { Typography, FormLabel, FormGroup, TextField, Button } from '@material-ui/core';\nimport { Link, useHistory } from 'react-router-dom';\nimport queryString from 'query-string';\nimport clsx from 'clsx';\nimport { useSnackbar } from 'notistack';\nimport BlockProgress from '../components/BlockProgress';\nimport Auth from '../components/Auth';\nimport AlertMessage from '../components/AlertMessage';\nimport { loadStore, store, action } from '../store';\nimport * as Types from '../react-app-env';\n\nlet _storeSubs = false;\nlet _loadStoreSubs = false;\n\nexport default function ChangePassword() {\n  const { enqueueSnackbar } = useSnackbar();\n  const history = useHistory();\n  const [password, setPassword] = useState('');\n  const [passwordRepeat, setPasswordRepeat] = useState('');\n  const [load, setLoad] = useState(false);\n  const parsedQuery = queryString.parse(history.location.search);\n  const _alert: Types.AlertProps = {\n    message: 'Alert closed',\n    status: 'info',\n    open: false,\n  };\n  const [alert, setAlert] = useState(_alert);\n\n  useEffect(() => {\n    if (!_loadStoreSubs) {\n      _loadStoreSubs = true;\n      loadStore.subscribe(() => {\n        setLoad(loadStore.getState().value);\n      });\n    }\n    if (!_storeSubs) {\n      _storeSubs = true;\n      store.subscribe(() => {\n        const state = store.getState();\n        if (state.passData) {\n          if (state.type === 'CHANGE_PASS_FAILED') {\n            const { message }: any = state.passData?.data?.errorData;\n            enqueueSnackbar(`Change password: ${message}`);\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n          } else if (state.type === 'CHANGE_PASS_SUCCEEDED') {\n            loadStore.dispatch({ type: 'SET_LOAD', value: false });\n            const { data } = state.passData;\n            const newAlert: any = {\n              open: true,\n              message: data?.message,\n              status: data?.result,\n            };\n            setAlert(newAlert);\n            if (data?.result === 'success') {\n              setTimeout(() => {\n                history.push('/');\n              }, 1500);\n            }\n          }\n        }\n      });\n    }\n  }, []);\n\n  const token: any = parsedQuery.k;\n  const email: any = parsedQuery.e;\n  return (\n    <div className={clsx('login-wrapper', 'col-center')}>\n      <div className=\"header\">\n        <Typography variant=\"h4\">Change password form</Typography>\n      </div>\n      <div className=\"form-item\">\n        <Typography>Please fill in all fields</Typography>\n      </div>\n      <FormGroup>\n        <FormLabel>Password</FormLabel>\n        <div className={clsx('form-item', 'col-center')}>\n          <TextField\n            defaultValue={password}\n            onChange={(e: any) => {\n              setPassword(e.target.value);\n            }}\n            type=\"password\"\n            variant=\"outlined\"\n            placeholder=\"password\"\n          />\n        </div>\n        <FormLabel>Password repeat</FormLabel>\n        <div className={clsx('form-item', 'col-center')}>\n          <TextField\n            defaultValue={passwordRepeat}\n            onChange={(e: any) => {\n              setPasswordRepeat(e.target.value);\n            }}\n            type=\"password\"\n            variant=\"outlined\"\n            placeholder=\"password repeat\"\n          />\n        </div>\n      </FormGroup>\n      <div className=\"form-item\">\n        {load ? (\n          <BlockProgress />\n        ) : (\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            type=\"submit\"\n            // eslint-disable-next-line no-unused-vars\n            onClick={(e: any) => {\n              loadStore.dispatch({ type: 'SET_LOAD', value: true });\n              action({\n                type: 'CHANGE_PASS_REQUESTED',\n                args: { token, body: { password, password_repeat: passwordRepeat, email } },\n              });\n              setAlert(_alert);\n            }}>\n            Send\n          </Button>\n        )}\n      </div>\n      <div className=\"form-item\">\n        {alert.open ? <AlertMessage message={alert.message} status={alert.status} /> : ''}\n      </div>\n      <div className=\"form-item\">\n        <Link to=\"/forgot\">Send new email</Link>\n      </div>\n    </div>\n  );\n}","/home/sergey/Projects/ads-panel-app/src/components/Graph.tsx",["186","187","188"],"/home/sergey/Projects/ads-panel-app/src/components/BlockProgress.tsx",["189"],"import React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nexport default function BlockProgress() {\n  return <CircularProgress />;\n}","/home/sergey/Projects/ads-panel-app/src/worker/index.ts",[],"/home/sergey/Projects/ads-panel-app/src/components/BlockSelect.tsx",["190","191","192"],"import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport * as Types from '../react-app-env';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 200,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  })\n);\n\nexport default function SimpleSelect(props: Types.SelectProps) {\n  const { children, handleChange, value, name } = props;\n  const classes = useStyles();\n\n  return (\n    <div>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-outlined-label\">{name}</InputLabel>\n        <Select\n          color=\"secondary\"\n          labelId=\"demo-simple-select-outlined-label\"\n          id=\"demo-simple-select-outlined\"\n          value={value}\n          onChange={handleChange}\n          label={name}>\n          {children}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}","/home/sergey/Projects/ads-panel-app/src/components/ListElement.tsx",["193"],"import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport * as Types from '../react-app-env';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  })\n);\n\nexport default function FolderList(props: Types.ListElementProps) {\n  const { children, title, value } = props;\n  const classes = useStyles();\n\n  return (\n    <List className={classes.root}>\n      <ListItem>\n        <ListItemAvatar>\n          <Avatar>{children}</Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={title} secondary={value} />\n      </ListItem>\n    </List>\n  );\n}",["194","195","196","197","198"],"/home/sergey/Projects/ads-panel-app/src/components/DatePicker.tsx",[],"/home/sergey/Projects/ads-panel-app/src/components/TableStatisistic.tsx",["199","200","201"],"/home/sergey/Projects/ads-panel-app/src/components/Pagination.tsx",[],{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"202","replacedBy":"212"},{"ruleId":"204","replacedBy":"213"},{"ruleId":"206","replacedBy":"214"},{"ruleId":"208","replacedBy":"215"},{"ruleId":"210","replacedBy":"216"},{"ruleId":"217","severity":1,"message":"218","line":21,"column":12,"nodeType":null,"endLine":21,"endColumn":12,"fix":"219"},{"ruleId":"220","severity":1,"message":"221","line":10,"column":9,"nodeType":"222","messageId":"223","endLine":10,"endColumn":29},{"ruleId":"202","replacedBy":"224"},{"ruleId":"204","replacedBy":"225"},{"ruleId":"206","replacedBy":"226"},{"ruleId":"208","replacedBy":"227"},{"ruleId":"210","replacedBy":"228"},{"ruleId":"220","severity":1,"message":"229","line":3,"column":13,"nodeType":"222","messageId":"223","endLine":3,"endColumn":16},{"ruleId":"217","severity":1,"message":"230","line":6,"column":20,"nodeType":null,"endLine":8,"endColumn":3,"fix":"231"},{"ruleId":"202","replacedBy":"232"},{"ruleId":"204","replacedBy":"233"},{"ruleId":"206","replacedBy":"234"},{"ruleId":"208","replacedBy":"235"},{"ruleId":"210","replacedBy":"236"},{"ruleId":"220","severity":1,"message":"229","line":3,"column":13,"nodeType":"222","messageId":"223","endLine":3,"endColumn":16},{"ruleId":"217","severity":1,"message":"230","line":6,"column":20,"nodeType":null,"endLine":8,"endColumn":3,"fix":"237"},{"ruleId":"217","severity":1,"message":"238","line":11,"column":2,"nodeType":null,"endLine":11,"endColumn":2,"fix":"239"},{"ruleId":"202","replacedBy":"240"},{"ruleId":"204","replacedBy":"241"},{"ruleId":"206","replacedBy":"242"},{"ruleId":"208","replacedBy":"243"},{"ruleId":"210","replacedBy":"244"},{"ruleId":"217","severity":1,"message":"238","line":12,"column":2,"nodeType":null,"endLine":12,"endColumn":2,"fix":"245"},{"ruleId":"217","severity":1,"message":"238","line":230,"column":2,"nodeType":null,"endLine":230,"endColumn":2,"fix":"246"},{"ruleId":"217","severity":1,"message":"238","line":51,"column":2,"nodeType":null,"endLine":51,"endColumn":2,"fix":"247"},{"ruleId":"202","replacedBy":"248"},{"ruleId":"204","replacedBy":"249"},{"ruleId":"206","replacedBy":"250"},{"ruleId":"208","replacedBy":"251"},{"ruleId":"210","replacedBy":"252"},{"ruleId":"220","severity":1,"message":"253","line":20,"column":28,"nodeType":"222","messageId":"223","endLine":20,"endColumn":41},{"ruleId":"202","replacedBy":"254"},{"ruleId":"204","replacedBy":"255"},{"ruleId":"206","replacedBy":"256"},{"ruleId":"208","replacedBy":"257"},{"ruleId":"210","replacedBy":"258"},{"ruleId":"220","severity":1,"message":"259","line":8,"column":8,"nodeType":"222","messageId":"223","endLine":8,"endColumn":12},{"ruleId":"217","severity":1,"message":"238","line":131,"column":2,"nodeType":null,"endLine":131,"endColumn":2,"fix":"260"},{"ruleId":"220","severity":1,"message":"261","line":3,"column":8,"nodeType":"222","messageId":"223","endLine":3,"endColumn":12},{"ruleId":"217","severity":1,"message":"262","line":4,"column":9,"nodeType":null,"endLine":4,"endColumn":61,"fix":"263"},{"ruleId":"217","severity":1,"message":"264","line":37,"column":2,"nodeType":null,"endLine":37,"endColumn":3,"fix":"265"},{"ruleId":"217","severity":1,"message":"238","line":6,"column":2,"nodeType":null,"endLine":6,"endColumn":2,"fix":"266"},{"ruleId":"220","severity":1,"message":"267","line":4,"column":8,"nodeType":"222","messageId":"223","endLine":4,"endColumn":16},{"ruleId":"220","severity":1,"message":"268","line":5,"column":8,"nodeType":"222","messageId":"223","endLine":5,"endColumn":22},{"ruleId":"217","severity":1,"message":"238","line":42,"column":2,"nodeType":null,"endLine":42,"endColumn":2,"fix":"269"},{"ruleId":"217","severity":1,"message":"238","line":34,"column":2,"nodeType":null,"endLine":34,"endColumn":2,"fix":"270"},{"ruleId":"202","replacedBy":"271"},{"ruleId":"204","replacedBy":"272"},{"ruleId":"206","replacedBy":"273"},{"ruleId":"208","replacedBy":"274"},{"ruleId":"210","replacedBy":"275"},{"ruleId":"220","severity":1,"message":"276","line":11,"column":8,"nodeType":"222","messageId":"223","endLine":11,"endColumn":19},{"ruleId":"217","severity":1,"message":"277","line":23,"column":20,"nodeType":null,"endLine":25,"endColumn":13,"fix":"278"},{"ruleId":"217","severity":1,"message":"238","line":80,"column":2,"nodeType":null,"endLine":80,"endColumn":2,"fix":"279"},"lines-around-directive",["280"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["280"],[],[],[],[],"prettier/prettier","Insert `,`",{"range":"281","text":"282"},"no-unused-vars","'REACT_APP_SERVER_URL' is assigned a value but never used.","Identifier","unusedVar",["280"],[],[],[],[],"'lib' is defined but never used.","Delete `⏎····⏎··`",{"range":"283","text":"284"},["280"],[],[],[],[],{"range":"285","text":"284"},"Insert `⏎`",{"range":"286","text":"287"},["280"],[],[],[],[],{"range":"288","text":"287"},{"range":"289","text":"287"},{"range":"290","text":"287"},["280"],[],[],[],[],"'closeSnackbar' is assigned a value but never used.",["280"],[],[],[],[],"'Auth' is defined but never used.",{"range":"291","text":"287"},"'clsx' is defined but never used.","Replace `·ArgumentAxis,·ValueAxis,·Chart,·LineSeries,·Legend·` with `⏎··ArgumentAxis,⏎··ValueAxis,⏎··Chart,⏎··LineSeries,⏎··Legend,⏎`",{"range":"292","text":"293"},"Delete `;`",{"range":"294","text":"284"},{"range":"295","text":"287"},"'MenuItem' is defined but never used.","'FormHelperText' is defined but never used.",{"range":"296","text":"287"},{"range":"297","text":"287"},["280"],[],[],[],[],"'BlockSelect' is defined but never used.","Replace `⏎····⏎··},[icons]·` with `},·[icons]`",{"range":"298","text":"299"},{"range":"300","text":"287"},"padding-line-between-statements",[514,514],",",[174,182],"",[181,189],[257,257],"\n",[317,317],[7552,7552],[1410,1410],[4286,4286],[118,170],"\n  ArgumentAxis,\n  ValueAxis,\n  Chart,\n  LineSeries,\n  Legend,\n",[1054,1055],[156,156],[1258,1258],[991,991],[796,814],"}, [icons]",[2965,2965]]